#!/usr/bin/env python3
from mpi4py import *
from teca import *
from teca_topological_spine import *
from teca_jet_stream_sinuosity import *
import numpy as np
import sys, os, argparse

def parse_command_line():
    parser = argparse.ArgumentParser()

    parser.add_argument('--input_regex', type=str, default='.*\.nc',
         help='a regular expression pointing to the dataset to process')

    parser.add_argument('--output_image', type=str,
        default='skeleton_', help='output image file name')

    parser.add_argument('--output_file', type=str,
        default='./max_wind_jet.csv', help='output file name')

    parser.add_argument('--bounds', nargs='+', type=float,
        default=None, help='lat lon bounds to ' \
        'detect over [lon 0, lon 1, lat 0, lat 1]')

    parser.add_argument('--level', type=float,
        default=200.0, help='pressure level to detect at')

    parser.add_argument('--wind_u_var', type=str,
        default='U', help='variable name of U component of the wind')

    parser.add_argument('--wind_v_var', type=str,
        default='U', help='variable name of V component of the wind')

    parser.add_argument('--wind_threshold', type=float,
        default=30.0, help='threshold for segmentation of wind speed (m/s)')

    parser.add_argument('--area_threshold', type=float,
        default=0.0, help='removes features with area smaller than this (km^2)')

    parser.add_argument('--first_step', type=int,
        default=0, help='first time step to process')

    parser.add_argument('--last_step', type=int,
        default=-1, help='last time step to process')

    parser.add_argument('--n_threads', type=int,
        default=1, help='number of threads')

    parser.add_argument('-d', '--dpi', type=int,
        default=100, help='output image DPI')

    parser.add_argument('-i', '--interact', action='store_true',
        help='display plots in pop-up windows')

    parser.add_argument('-p', '--plot', action='store_true',
        help='generate plots')

    args = parser.parse_args()

    # configure matplotlib
    if args.plot and not args.interact:
        import matplotlib
        matplotlib.use('Agg')

    #set teca's internal error handler
    set_stack_trace_on_error()

    return args


# parse the command line
args = parse_command_line()

# build and configure the pipeline starting with the CF2 reader
cfr = teca_cf_reader.New()
cfr.set_files_regex(args.input_regex)
cfr.set_x_axis_variable('lon')
cfr.set_y_axis_variable('lat')
cfr.set_z_axis_variable('plev')
cfr.set_t_axis_variable('time')
cfr.set_periodic_in_x(1)

# calculate wind speed from velocity vector
l2 = teca_l2_norm.New()
l2.set_input_connection(cfr.get_output_port())
l2.set_component_0_variable(args.wind_u_var)
l2.set_component_1_variable(args.wind_v_var)
l2.set_l2_norm_variable('wind_speed')

# segment domain by wind speed (30 m/s default)
seg = teca_binary_segmentation.New()
seg.set_input_connection(l2.get_output_port())
seg.set_threshold_variable('wind_speed')
seg.set_segmentation_variable('segments')
seg.set_low_threshold_value(args.wind_threshold)

# label each connected piece of the segmentation
cc = teca_connected_components.New()
cc.set_input_connection(seg.get_output_port())
cc.set_segmentation_variable('segments')
cc.set_component_variable('labels')

# calculate area of each piece of the segmentation
cca = teca_2d_component_area.New()
cca.set_input_connection(cc.get_output_port())
cca.set_component_variable('labels')

# remove pieces below the min area
caf = teca_component_area_filter.New()
caf.set_input_connection(cca.get_output_port())
caf.set_component_variable('labels')
caf.set_variable_post_fix('_masked')
caf.set_low_area_threshold(args.area_threshold)

# compute the topological spine of each remaining piece
ts = teca_topological_spine.New()
ts.set_input_connection(caf.get_output_port())
ts.set_label_variable('labels_masked')
ts.set_scalar_variable('wind_speed')
ts.set_bounds(args.bounds)
ts.set_level(args.level)
ts.set_out_file(args.output_image)
ts.set_interact(args.interact)
ts.set_plot(args.plot)
ts.set_dpi(args.dpi)

# compute sinuosity
jss = teca_jet_stream_sinuosity.New()
jss.set_input_connection(ts.get_output_port())
jss.set_out_file(args.output_image)
jss.set_interact(args.interact)
jss.set_plot(args.plot)
jss.set_dpi(args.dpi)

# map reduce execution pattern
mr = teca_table_reduce.New()
mr.set_input_connection(jss.get_output_port())
mr.set_start_index(args.first_step)
mr.set_end_index(args.last_step)
mr.set_thread_pool_size(args.n_threads)

# order the results
sort = teca_table_sort.New()
sort.set_input_connection(mr.get_output_port())
sort.set_index_column('gid')

# convert simulation time to human readable time
cal = teca_table_calendar.New()
cal.set_input_connection(sort.get_output_port())

# write the result to disk
tw = teca_table_writer.New()
tw.set_input_connection(cal.get_output_port())
tw.set_file_name(args.output_file)

# run the pipeline
tw.update()



